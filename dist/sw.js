const o="v1";const r=new BroadcastChannel("sw-tunnel");self.addEventListener("install",function(){self.skipWaiting(),console.log("Service worker has been installed.")});self.addEventListener("activate",function(e){e.waitUntil(l())});async function l(){await self.clients.claim(),console.log("Service worker has been activated.")}self.addEventListener("fetch",function(e){const n=new URL(e.request.url);if(n.origin.includes("api.allorigins.win")||n.origin.includes("is1-ssl.mzstatic.com"))return i({type:"STATE_LOAD_DATA",isFetching:!0}),e.respondWith(w(e.request))});async function h(e,n){const a=new Date().getTime();for(const t of n){const c=new URL(t.url).searchParams.get("sw-cache");a-864e5>c&&await e.delete(t)}}function u(e,n){return n.filter(a=>{const t=new URL(a.url);return t.searchParams.has("sw-cache")&&t.searchParams.delete("sw-cache"),e.url===t.href}).at(0)}const w=async e=>{const n=await caches.open(o),a=await n.keys();await h(n,a);const t=u(e,a);if(t){let c=await caches.match(t);if(c)return i({type:"STATE_LOAD_DATA",isFetching:!1}),c}console.log("Fetching from network...",e.url);const s=await fetch(e);return await f(e,s),i({type:"STATE_LOAD_DATA",isFetching:!1}),s};async function f(e,n){const a=n.clone(),t=new URL(e.url);t.searchParams.set("sw-cache",new Date().getTime().toString());const s=new Request(t);await(await caches.open(o)).put(s,a)}function i(e){r.postMessage(e)}
